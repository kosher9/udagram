Description: >
  Cedric KOSSI / Udagram

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  LaunchTemplateVersionNumber:
    Type: String
    Default: 1

  AMIId:
    Description: Specifies EC2 instance identity
    Type: String

  InstanceType:
    Description: Specifies the EC2 instance architecture e.g memory 4GB Ram
    Type: String


 # AwS services to be included in a stack    
Resources:

# Security group for Load balancer
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

# Allow for inbound requests (Incoming traffic to Load balancer)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
# Allow for outbound requests (Outgoing traffic to Load Balancer)
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

# Security group for Web-Servers
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
# instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
# creating a Role called UdagramS3ReadOnlyEC2 
  ProfileRoleForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: UdagramS3ReadOnlyEC2

  # # S3 Bucket Role
  UdagramS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

#allows you to manage access to specific Amazon S3 storage resources
  S3ReadOnlyBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadOnlyAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - S3:List*
              - s3-object-lambda:Get*
              - s3-object-lambda:List*
            Resource: "*"
      Roles:
        - Ref: UdagramS3ReadOnlyEC2


# LaunchTemplate Specifies instance Configuration
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip -y
            apt-get install awscli -y
            unzip awscli
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://bucket-web-1/index.html > index.html 
            
        ImageId: !Ref AMIId
        IamInstanceProfile: 
          Name: !Ref ProfileRoleForApp 
        SecurityGroupIds:
          - sg-00712cfd9e7fa1d47
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: "10"
# AutoScalling Groups
# Auto scalling group for Web-server (Specifies no of servers that will spin up)
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !Ref LaunchTemplateVersionNumber
      MinSize: "4"
      MaxSize: "6"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
# AutoScalling group for Load balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


Outputs:
  WebAppLBDNSName:
      Description: Public URL of the Load Balancer
      Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
      Export:
          Name: !Sub ${EnvironmentName}-LB-DNSName
          